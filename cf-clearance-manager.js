import { spawn } from "node:child_process";
import { existsSync, readFileSync, writeFileSync } from "node:fs";
import path from "node:path";

class CFClearanceManager {
  constructor(dataDir) {
    this.dataDir = dataDir;
    this.clearanceCache = new Map(); // –ö—ç—à: "proxy:userId" -> { cf_clearance, userAgent, expires, cookies }
    this.clearanceCacheFile = path.join(dataDir, "cf_clearance_cache.json");
    this.loadCache();
  }

  loadCache() {
    try {
      if (existsSync(this.clearanceCacheFile)) {
        const data = JSON.parse(readFileSync(this.clearanceCacheFile, "utf8"));
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        for (const [key, value] of Object.entries(data)) {
          if (value.expires && Date.now() < value.expires) {
            this.clearanceCache.set(key, value);
          }
        }
        console.log(`üîê [CF-Manager] Loaded ${this.clearanceCache.size} valid cf_clearance tokens from cache`);
      }
    } catch (error) {
      console.log(`‚ùå [CF-Manager] Error loading cache: ${error.message}`);
    }
  }

  saveCache() {
    try {
      const cacheData = {};
      for (const [key, value] of this.clearanceCache.entries()) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        if (value.expires && Date.now() < value.expires) {
          cacheData[key] = value;
        }
      }
      writeFileSync(this.clearanceCacheFile, JSON.stringify(cacheData, null, 2));
      console.log(`üíæ [CF-Manager] Saved ${Object.keys(cacheData).length} cf_clearance tokens to cache`);
    } catch (error) {
      console.log(`‚ùå [CF-Manager] Error saving cache: ${error.message}`);
    }
  }

  generateCacheKey(proxy, userId) {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const proxyKey = proxy ? `${proxy.host}:${proxy.port}:${proxy.username || ''}` : "direct";
    return `${proxyKey}:${userId || 'anonymous'}`;
  }

  getCachedClearance(proxy, userId) {
    const key = this.generateCacheKey(proxy, userId);
    const cached = this.clearanceCache.get(key);

    if (cached && cached.expires && Date.now() < cached.expires) {
      console.log(`‚úÖ [CF-Manager] Using cached cf_clearance for ${key}`);
      return cached;
    }

    if (cached) {
      console.log(`‚è∞ [CF-Manager] Cached cf_clearance expired for ${key}`);
      this.clearanceCache.delete(key);
    }

    return null;
  }

  async getClearance(proxy, userId, targetUrl = "https://bplace.org") {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.getCachedClearance(proxy, userId);
    if (cached) {
      return cached;
    }

    // –í–∫–ª—é—á–∞–µ–º CF-Clearance-Scraper –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Body issues
    console.log(`üîÑ [CF-Manager] Obtaining new cf_clearance for proxy: ${proxy ? `${proxy.host}:${proxy.port}` : 'direct'}, user: ${userId || 'anonymous'}`);

    try {
      const clearanceData = await this.obtainClearanceFromPython(proxy, targetUrl);

      if (clearanceData && clearanceData.cf_clearance) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ 23 —á–∞—Å–∞ (Cloudflare —Ç–æ–∫–µ–Ω—ã –æ–±—ã—á–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—Ç 24 —á–∞—Å–∞)
        const expires = Date.now() + (23 * 60 * 60 * 1000);

        const cacheEntry = {
          cf_clearance: clearanceData.cf_clearance,
          userAgent: clearanceData.user_agent,
          expires: expires,
          cookies: clearanceData.cookies || {},
          obtainedAt: new Date().toISOString()
        };

        const key = this.generateCacheKey(proxy, userId);
        this.clearanceCache.set(key, cacheEntry);
        this.saveCache();

        console.log(`‚úÖ [CF-Manager] Successfully obtained cf_clearance for ${key}`);
        return cacheEntry;
      }
    } catch (error) {
      console.log(`‚ùå [CF-Manager] Failed to obtain cf_clearance: ${error.message}`);
    }

    return null;
  }

  async obtainClearanceFromPython(proxy, targetUrl) {
    return new Promise((resolve, reject) => {
      const pythonScript = path.join(this.dataDir, "..", "CF-Clearance-Scraper", "main.py");

      if (!existsSync(pythonScript)) {
        reject(new Error(`CF-Clearance-Scraper main.py not found at ${path.resolve(pythonScript)}`));
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ main.py, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç CF-Clearance-Scraper
      const args = ["main.py", targetUrl, "--timeout", "60"];

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (proxy) {
        let proxyUrl = `${proxy.protocol || 'http'}://`;
        if (proxy.username && proxy.password) {
          proxyUrl += `${encodeURIComponent(proxy.username)}:${encodeURIComponent(proxy.password)}@`;
        }
        proxyUrl += `${proxy.host}:${proxy.port}`;
        args.push("--proxy", proxyUrl);
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏, –Ω–µ —Ç–æ–ª—å–∫–æ cf_clearance
      args.push("--all-cookies");

      const tempFile = path.resolve(this.dataDir, `cf_temp_${Date.now()}.json`);
      args.push("--file", tempFile);

      console.log(`üêç [CF-Manager] Running Python script: python ${args.join(' ')}`);

      const pythonProcess = spawn("python", args, {
        stdio: ["ignore", "pipe", "pipe"],
        cwd: path.dirname(pythonScript)
      });

      let stdout = "";
      let stderr = "";

      pythonProcess.stdout.on("data", (data) => {
        stdout += data.toString();
      });

      pythonProcess.stderr.on("data", (data) => {
        stderr += data.toString();
      });

      pythonProcess.on("close", (code) => {
        if (code === 0) {
          try {
            // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
            if (existsSync(tempFile)) {
              const result = JSON.parse(readFileSync(tempFile, "utf8"));

              // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
              try {
                require("fs").unlinkSync(tempFile);
              } catch {}

              // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              const domain = new URL(targetUrl).hostname;

              // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–º–µ–Ω—É –∏–ª–∏ —Å —Ç–æ—á–∫–æ–π –≤ –Ω–∞—á–∞–ª–µ (.domain)
              let domainData = result[domain] || result[`.${domain}`];

              if (domainData && domainData.length > 0) {
                const latestEntry = domainData[domainData.length - 1];
                resolve({
                  cf_clearance: latestEntry.cf_clearance,
                  user_agent: latestEntry.user_agent,
                  cookies: this.parseCookies(latestEntry.cookies)
                });
              } else {
                reject(new Error(`No clearance data found for domain ${domain} (checked both "${domain}" and ".${domain}")`));
              }
            } else {
              // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ stdout –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
              const cfMatch = stdout.match(/Cookie: cf_clearance=([^\s]+)/);
              const uaMatch = stdout.match(/User agent: (.+)/);

              if (cfMatch && uaMatch) {
                resolve({
                  cf_clearance: cfMatch[1],
                  user_agent: uaMatch[1].trim(),
                  cookies: { cf_clearance: cfMatch[1] }
                });
              } else {
                reject(new Error("Could not extract clearance from output"));
              }
            }
          } catch (error) {
            reject(new Error(`Failed to parse result: ${error.message}`));
          }
        } else {
          reject(new Error(`Python script failed with code ${code}: ${stderr || stdout}`));
        }
      });

      pythonProcess.on("error", (error) => {
        reject(new Error(`Failed to spawn Python process: ${error.message}`));
      });

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
      setTimeout(() => {
        try {
          pythonProcess.kill();
        } catch {}
        reject(new Error("Python script timeout"));
      }, 90000); // 90 —Å–µ–∫—É–Ω–¥
    });
  }

  parseCookies(cookiesArray) {
    const cookies = {};
    if (Array.isArray(cookiesArray)) {
      for (const cookie of cookiesArray) {
        if (cookie.name && cookie.value) {
          cookies[cookie.name] = cookie.value;
        }
      }
    }
    return cookies;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  async refreshClearance(proxy, userId, targetUrl = "https://bplace.org") {
    const key = this.generateCacheKey(proxy, userId);
    this.clearanceCache.delete(key);
    console.log(`üîÑ [CF-Manager] Force refreshing cf_clearance for ${key}`);
    return await this.getClearance(proxy, userId, targetUrl);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
  cleanupExpiredTokens() {
    const before = this.clearanceCache.size;
    for (const [key, value] of this.clearanceCache.entries()) {
      if (!value.expires || Date.now() >= value.expires) {
        this.clearanceCache.delete(key);
      }
    }
    const after = this.clearanceCache.size;
    if (before !== after) {
      console.log(`üßπ [CF-Manager] Cleaned up ${before - after} expired tokens`);
      this.saveCache();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º
  getStats() {
    const total = this.clearanceCache.size;
    let expiringSoon = 0;

    for (const [key, value] of this.clearanceCache.entries()) {
      if (value.expires && (value.expires - Date.now()) < (2 * 60 * 60 * 1000)) { // –ò—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤
        expiringSoon++;
      }
    }

    return { total, expiringSoon };
  }
}

export default CFClearanceManager;